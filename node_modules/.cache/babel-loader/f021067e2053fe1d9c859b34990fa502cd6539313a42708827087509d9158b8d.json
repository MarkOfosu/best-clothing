{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAoGYvbfzKX8dy5ujhKM2iTsFn0N1sh9S8\",\n  authDomain: \"best-clothing-db-9908f.firebaseapp.com\",\n  projectId: \"best-clothing-db-9908f\",\n  storageBucket: \"best-clothing-db-9908f.appspot.com\",\n  messagingSenderId: \"399443599577\",\n  appId: \"1:399443599577:web:caa5f7832f49a535c8dec8\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithGoogleRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  // console.log(userDocRef)\n  const userSnapshot = await getDoc(userDocRef);\n  // console.log(userSnapshot);\n  // console.log(userSnapshot.exists())\n\n  // if user data does not exist\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n\n  // create/set the document with the data from userAuth in my collection\n\n  // if user data exists, \n\n  // return userDocRef\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message"],"sources":["/Users/mark/Desktop/ZMT/React/Projects/best-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["\nimport {initializeApp} from 'firebase/app';\nimport {\n    getAuth, \n    signInWithRedirect, \n    signInWithPopup, \n    GoogleAuthProvider\n} from 'firebase/auth'\n\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc\n} from 'firebase/firestore'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAoGYvbfzKX8dy5ujhKM2iTsFn0N1sh9S8\",\n    authDomain: \"best-clothing-db-9908f.firebaseapp.com\",\n    projectId: \"best-clothing-db-9908f\",\n    storageBucket: \"best-clothing-db-9908f.appspot.com\",\n    messagingSenderId: \"399443599577\",\n    appId: \"1:399443599577:web:caa5f7832f49a535c8dec8\"\n  };\n  \n  // Initialize Firebase\n  const firebaseApp = initializeApp(firebaseConfig);\n\n  const googleProvider = new GoogleAuthProvider();\n  googleProvider.setCustomParameters({\n    prompt: 'select_account'\n  })\n  export const auth = getAuth();\n  export const signInWithGooglePopup = () => signInWithPopup (auth, googleProvider);\n  export const signInWithGoogleRedirect = () => signInWithGoogleRedirect(auth,googleProvider);\n    \n\n\n  export const db = getFirestore();\n\n  export const createUserDocumentFromAuth = async (userAuth) => {\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    // console.log(userDocRef)\n    const userSnapshot = await getDoc(userDocRef)\n    // console.log(userSnapshot);\n    // console.log(userSnapshot.exists())\n\n    // if user data does not exist\n      if(!userSnapshot.exists()){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try{\n          await setDoc(userDocRef,{\n            displayName,\n            email,\n            createdAt\n          });\n        } catch(error){\n          console.log('error creating the user', error.message);\n\n        }\n\n      }\n\n      return userDocRef;\n\n\n\n    // create/set the document with the data from userAuth in my collection\n\n    // if user data exists, \n\n    // return userDocRef\n\n  };\n"],"mappings":"AACA,SAAQA,aAAa,QAAO,cAAc;AAC1C,SACIC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,QACf,eAAe;AAEtB,SACEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,QACD,oBAAoB;AAE3B,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGhB,aAAa,CAACS,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAIb,kBAAkB,EAAE;AAC/Ca,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE;AACV,CAAC,CAAC;AACF,OAAO,MAAMC,IAAI,GAAGnB,OAAO,EAAE;AAC7B,OAAO,MAAMoB,qBAAqB,GAAGA,CAAA,KAAMlB,eAAe,CAAEiB,IAAI,EAAEH,cAAc,CAAC;AACjF,OAAO,MAAMK,wBAAwB,GAAGA,CAAA,KAAMA,wBAAwB,CAACF,IAAI,EAACH,cAAc,CAAC;AAI3F,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAE;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EACjD;EACA,MAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACmB,UAAU,CAAC;EAC7C;EACA;;EAEA;EACE,IAAG,CAACE,YAAY,CAACC,MAAM,EAAE,EAAC;IACxB,MAAM;MAACC,WAAW;MAAEC;IAAK,CAAC,GAAGN,QAAQ;IACrC,MAAMO,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAG;MACD,MAAMzB,MAAM,CAACkB,UAAU,EAAC;QACtBI,WAAW;QACXC,KAAK;QACLC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAME,KAAK,EAAC;MACZC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACG,OAAO,CAAC;IAEvD;EAEF;EAEA,OAAOX,UAAU;;EAInB;;EAEA;;EAEA;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}